// ********RoostGPT********
/*
Test generated by RoostGPT for test test-workflow using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=getTotalQuantity_a551cffb8a
ROOST_METHOD_SIG_HASH=getTotalQuantity_321f4e8c51

"""
  Scenario 1: Testing the Positive Scenario where totalQuantity has a value no

  Details:
    TestName: testTotalQuantityValueNonZero.
    Description: This tests checks if the method correctly returns a non-zero totalQuantity if it is set.
  Execution:
    Arrange: An instance of the class should be initialized with totalQuantity = 100.0.
    Act: Invoke getTotalQuantity() from this instance.
    Assert: Assert that returned value is 100.0.
  Validation:
    This aims to verify if the returned value is as per what is expected.
    The significance of the test is to ensure that the method behaves as expected in the ideal scenario.

  Scenario 2: Testing the Scenario where totalQuantity is zero

  Details:
    TestName: testTotalQuantityValueZero.
    Description: This test checks if the method correctly returns zero if totalQuantity is not set.
  Execution:
    Arrange: An instance of the class should be initialized with totalQuantity = 0.0.
    Act: Invoke getTotalQuantity() from this instance.
    Assert: Assert that returned value is 0.0.
  Validation:
    This aims to verify if the returned value is as per what is expected in case totalQuantity is not set or is zero.
    The significance of the test is to ensure that the method behaves as expected when no value is set.

  Scenario 3: Testing the Scenario where totalQuantity is Negative

  Details:
    TestName: testNegativeTotalQuantity.
    Description: This test checks if the method correctly returns a negative totalQuantity if it is set.
  Execution:
    Arrange: An instance of the class should be initialized with totalQuantity = -10.0.
    Act: Invoke getTotalQuantity() from this instance.
    Assert: Assert that returned value is -10.0.
  Validation:
    This aims to verify if the returned value is as per what is expected in case the totalQuantity is negative.
    The significance of the test is to ensure that the method behaves as expected in such scenario.
"""
*/

// ********RoostGPT********
package model;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class PurchaseModelGetTotalQuantityTest {

	PurchaseModel purchaseModel;

	@Before
	public void setUp() throws Exception {
		purchaseModel = new PurchaseModel();
	}

	@Test
	public void testTotalQuantityValueNonZero() {
		purchaseModel.setTotalQuantity(100.0f);
		float result = purchaseModel.getTotalQuantity();
		assertEquals(100.0f, result, 0.01);
	}

	@Test
	public void testTotalQuantityValueZero() {
		purchaseModel.setTotalQuantity(0.0f);
		float result = purchaseModel.getTotalQuantity();
		assertEquals(0.0f, result, 0.01);
	}

	@Test
	public void testNegativeTotalQuantity() {
		purchaseModel.setTotalQuantity(-10.0f);
		float result = purchaseModel.getTotalQuantity();
		assertEquals(-10.0f, result, 0.01);
	}

}
